import { t } from "elysia";
export const protocolIdList = [
    // ─── DEX ─────────────────────────────────────────────────────────────
    "uniswap",
    "ambient",
    "arthswap",
    "base-swap",
    "camelot",
    "crust",
    "fenix",
    "horiza",
    "izumi",
    "kim",
    "pancake-swap",
    "quickswap",
    "ramses",
    "retro",
    "stryke",
    "sushi-swap",
    "swapr",
    "thruster",
    "voltage",
    "zero",
    "koi",
    "supswap",
    "zk-swap",
    "thirdtrade",
    "swap-x",
    "velodrome",
    "aerodrome",
    "balancer",
    "curve",
    "cross_curve",
    "curveNPool",
    "aura",
    "akron",
    "beefy",
    "dragonswap",
    "poolside",
    "koi",
    "syncswap",
    "neptune",
    "zkSwapThreePool",
    "syncswap",
    "rfx",
    "ra",
    "maverick",
    "trader-joe",
    "velodrome",
    "hanji",
    "reserve",
    // ─── Lending ──────────────────────────────────────────────────────
    "radiant",
    "aave",
    "fraxlend",
    "ironclad",
    "euler",
    "gearbox",
    "compound",
    "sturdy",
    "frax",
    "ionic",
    "moonwell",
    "fluid",
    "silo",
    "morpho",
    "dolomite",
    "badger",
    "ajna",
    "layerbank",
    "ion",
    "venus",
    "woofi",
    "reactor_fusion",
    "eigenlayer",
    "vest",
    "zerolend",
    "lnd",
    "hyperdrive",
    "gamma",
    "oku",
    "hourglass",
    "veda",
    "kyo",
    "sonex",
    "lendle",
    "tako-tako",
    "equalizer",
    "spectra",
    "beraborrow",
    "superlend",
    "avalon",
    "iguana",
    "xlend",
    "sake",
    "sonicmarket",
    "stability",
    // ─── Staking ──────────────────────────────────────────────────────
    "angles",
    // ─── Yield Aggregator ──────────────────────────────────────────────
    "enzyme",
    "toros",
    "vicuna",
    "bunni",
    "beratrax",
    "concrete",
    "cian",
    // ─── Fixed Yield ──────────────────────────────────────────────
    "pendle",
    "splice",
    "sturdy",
    "yei",
    "termmax",
    // ─── Option Trading ────────────────────────────────────────────────
    "filament",
    "gammaswap",
    // ─── Synthetic Assets ────────────────────────────────────────────────
    "maha",
    "tempest",
    "uranium",
    "hanji",
    // ─── Others ──────────────────────────────────────────────────────
    "holdstation",
    "katana",
    "satlayer",
    "puffer",
];
// ─── DTOs ────────────────────────────────────────────────────────────────────
export const ProtocolResourceDto = t.Object({
    id: t.String(),
    name: t.String(),
    icon: t.String(),
    tags: t.Array(t.String()),
    description: t.String(),
    url: t.String(),
});
export const GetProtocolsQueryDto = t.Object({
    id: t.Optional(t.String({ description: "Filter results by name. Useful for searching a protocol to verify its integration" })),
    test: t.Optional(t.Boolean({ description: "Includes protocols that have only test opportunities", default: false })),
    ids: t.Optional(t.Array(t.String())),
    name: t.Optional(t.String({ description: "Search protocols by name" })),
    tags: t.Optional(t.Array(t.String())),
    opportunityTag: t.Optional(t.String({ description: "Filter by underlying opportunities' tag" })),
    page: t.Optional(t.Numeric({ description: "0-indexed page number", default: 0 })),
    items: t.Optional(t.Numeric({ description: "Number of items returned by page", default: 20 })), // items per page
});
export const GetProtocolParamsDto = t.Object({ id: t.String() });
export const UpdateProtocolDto = t.Object({
    icon: t.Optional(t.String({ format: "uri" })),
    url: t.Optional(t.String({ format: "uri" })),
    description: t.Optional(t.String()),
    name: t.Optional(t.String()),
    // iconFile: t.Optional(t.File()),
});
export const CreateProtocolDto = t.Object({
    icon: t.String({ format: "uri" }),
    url: t.String({ format: "uri" }),
    description: t.String(),
    id: t.String(),
    name: t.String(),
    tags: t.Array(t.String()),
});
export const ProtocolIdDto = t.Object({ id: t.String() });
export const NotionWebhookAddProtocolDto = t.Object({
    data: t.Object({
        properties: t.Object({
            id: t.Object({
                title: t.Array(t.Object({ text: t.Object({ content: t.String() }) })),
            }),
            description: t.Object({ rich_text: t.Array(t.Object({ text: t.Object({ content: t.String() }) })) }),
            icon: t.Object({
                files: t.Array(t.Union([
                    t.Object({ name: t.String(), file: t.Object({ url: t.String() }) }),
                    t.Object({ external: t.Object({ url: t.String() }) }),
                ])),
            }),
            name: t.Object({ rich_text: t.Array(t.Object({ text: t.Object({ content: t.String() }) })) }),
            tags: t.Object({ rich_text: t.Array(t.Object({ text: t.Object({ content: t.String() }) })) }),
            url: t.Object({ url: t.String() }),
        }),
    }),
}, { additionalProperties: true });
