import { t } from "elysia";
export const slugToProtocolId = {
    "uniswap-v2": "uniswap",
    "aave-v3": "aave",
    "aave-v2": "aave",
    "aave-static-atokens": "aave",
    "camelot-v2": "camelot",
    "meta-morpho": "morpho",
    "morpho-blue-vaults": "morpho",
    "balancer-v2": "balancer",
    "balancer-gauge": "balancer",
    "aura-lp": "aura",
    aura: "aura",
    beefy: "beefy",
    venus: "venus",
    "compound-v3": "compound",
    "curve-gauge": "curve",
    "euler-v2": "euler",
    fluid: "fluid",
    fraxlend: "frax",
    "frax-ether": "frax",
    "gearbox-v3": "gearbox",
    gearbox: "gearbox",
    moonwell: "moonwell",
    "pancakeswap-amm-v3": "pancake-swap",
    "quickswap-dex": "quickswap",
    "silo-protected": "silo",
    silo: "silo",
    "velodrome-v2-staking": "velodrome",
    zerolend: "zerolend",
};
export const apiTypes = {
    "/v1/protocols": {
        query: t.Object({
            slug: t.String({ example: "uniswap-v2" }),
        }),
        response: t.Array(t.Object({
            slug: t.String({ example: "uniswap-v2" }),
            name: t.String({ example: "Uniswap V2" }),
            desription: t.String(),
            url: t.String(),
            logosUri: t.String(),
            chains: t.Array(t.Object({ id: t.Number(), name: t.String() })),
        })),
    },
    "/v1/tokens": {
        query: t.Object({
            protocolSlug: t.Optional(t.String({ example: "uniswap-v2" })),
            primaryAddress: t.Optional(t.String({ description: "Ethereum address for contract interaction of defi token" })),
            address: t.Optional(t.String({ description: "Ethereum address of the token" })),
            chainId: t.Number(),
            type: t.Optional(t.Enum({ defi: "defi", base: "base" })),
            page: t.Number(),
            inludeMetadata: t.Optional(t.String()),
        }),
        response: t.Object({
            data: t.Array(t.Object({
                chainId: t.Number(),
                address: t.String(),
                type: t.Enum({ defi: "defi", base: "base" }),
                primaryAddress: t.String({ description: "Ethereum address for contract interaction of defi token" }),
                underlyingTokens: t.Array(t.Object({
                    address: t.String(),
                    chainId: t.Number(),
                    type: t.Enum({ defi: "defi", base: "base" }),
                })),
                apy: t.Number(),
            })),
            meta: t.Object({
                total: t.Number(),
                lastPage: t.Number(),
                currentPage: t.Number(),
                perPage: t.Number(),
                prev: t.Union([t.Null(), t.Number()]),
                next: t.Union([t.Null(), t.Number()]),
            }),
        }),
    },
    "/v1/shortcuts/quote": {
        query: t.Object({
            chainId: t.Optional(t.Numeric()),
            fromAddress: t.Optional(t.String()),
            routingStrategy: t.Enum({ ensowallet: "ensowallet", delegate: "delegate", router: "router" }),
            feeReceiver: t.Optional(t.String()),
            tokenIn: t.Array(t.String()),
            tokenOut: t.Array(t.String()),
            amountIn: t.Array(t.String()),
            fee: t.Optional(t.Array(t.String())),
            disableRFQs: t.Optional(t.Boolean()),
            ignoreAggregators: t.Optional(t.Array(t.String())),
            ignoreStandards: t.Optional(t.Array(t.String())),
        }),
        response: t.Object({
            gas: t.String(),
            amountOut: t.Object({}),
            priceImpact: t.Number(),
            feeAmount: t.Array(t.String()),
        }),
    },
    "/v1/shortcuts/route": {
        query: t.Object({
            chainId: t.Optional(t.Numeric()),
            fromAddress: t.String(),
            routingStrategy: t.Enum({ ensowallet: "ensowallet", delegate: "delegate", router: "router" }),
            receiver: t.Optional(t.String()),
            spender: t.Optional(t.String()),
            amountIn: t.Array(t.String()),
            amountOut: t.Optional(t.Array(t.String())),
            minAmountOut: t.Optional(t.Array(t.String())),
            slippage: t.Optional(t.String()),
            fee: t.Optional(t.Array(t.String())),
            feeReceiver: t.Optional(t.String()),
            disableRFQs: t.Optional(t.Boolean()),
            ignoreAggregators: t.Optional(t.Array(t.String())),
            ignoreStandards: t.Optional(t.Array(t.String())),
            tokenIn: t.Array(t.String()),
            tokenOut: t.Array(t.String()),
        }),
        response: t.Object({
            gas: t.String(),
            amountOut: t.String(),
            priceImpact: t.Number(),
            feeAmount: t.Array(t.String()),
            createAt: t.Number(),
            route: t.Array(t.Union([
                t.Object({
                    action: t.Literal("swap"),
                    protocol: t.String(),
                    tokenIn: t.Array(t.String()),
                    tokenOut: t.Array(t.String()),
                }),
                t.Object({
                    action: t.Literal("deposit"),
                    primary: t.String(),
                    tokenIn: t.Array(t.String()),
                    tokenOut: t.Array(t.String()),
                }),
            ])),
            tx: t.Object({
                data: t.String(),
                to: t.String(),
                from: t.String(),
                value: t.String(),
            }),
        }),
    },
};
